{
    "code": "def exponential_time_25(text, pattern):\n    # Wildcard pattern matching with backtracking\n    # '*' matches any sequence, '?' matches any single character\n    def match(text_idx, pattern_idx):\n        # Base cases\n        if pattern_idx >= len(pattern):\n            return text_idx >= len(text)\n        if text_idx >= len(text):\n            # Pattern can match empty text only if remaining pattern is all '*'\n            return all(p == '*' for p in pattern[pattern_idx:])\n        # Current characters match or pattern has '?'\n        if pattern[pattern_idx] == '?' or pattern[pattern_idx] == text[text_idx]:\n            return match(text_idx + 1, pattern_idx + 1)\n        # Handle '*' - match 0 or more characters\n        if pattern[pattern_idx] == '*':\n            # Match 0 characters\n            if match(text_idx, pattern_idx + 1):\n                return True\n            # Match 1 or more characters\n            return match(text_idx + 1, pattern_idx)\n        return False\n    return match(0, 0)",
    "complexity": "O(2^n)"
}