{
    "code": "def quadratic_time_26(grid):\n    # Game of Life - cell evolution simulation\n    if not grid or not grid[0]:\n        return grid\n    rows, cols = len(grid), len(grid[0])\n    # Create a copy of the grid\n    next_state = [[grid[r][c] for c in range(cols)] for r in range(rows)]\n    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n    for r in range(rows):\n        for c in range(cols):\n            # Count live neighbors\n            live_neighbors = 0\n            for dr, dc in directions:\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == 1:\n                    live_neighbors += 1\n            # Apply Game of Life rules\n            if grid[r][c] == 1 and (live_neighbors < 2 or live_neighbors > 3):\n                next_state[r][c] = 0\n            elif grid[r][c] == 0 and live_neighbors == 3:\n                next_state[r][c] = 1\n    return next_state",
    "complexity": "O(n^2)"
}