{
    "code": "def exponential_time_24(grid):\n    # Solve N-Queens problem on an NxN grid\n    n = len(grid)\n    def is_safe(row, col, queens_placed):\n        # Check if a queen can be placed at (row, col)\n        for r, c in queens_placed:\n            # Check row, column and diagonals\n            if r == row or c == col or abs(r - row) == abs(c - col):\n                return False\n        return True\n    def solve(row, queens_placed):\n        if row == n:\n            # All queens have been placed\n            return True\n        for col in range(n):\n            if is_safe(row, col, queens_placed):\n                queens_placed.append((row, col))\n                if solve(row + 1, queens_placed):\n                    return True\n                queens_placed.pop()  # Backtrack\n        return False\n    queens = []\n    solve(0, queens)\n    # Mark queen positions in the grid\n    for r, c in queens:\n        grid[r][c] = 'Q'\n    return grid",
    "complexity": "O(2^n)"
}