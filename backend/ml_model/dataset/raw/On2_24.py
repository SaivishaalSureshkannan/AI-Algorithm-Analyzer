{
    "code": "def quadratic_time_24(prerequisites):\n    # Check if a course schedule is possible (cycle detection)\n    # prerequisites is a list of [course, prerequisite] pairs\n    # Build adjacency list\n    courses = set()\n    for course, prereq in prerequisites:\n        courses.add(course)\n        courses.add(prereq)\n    graph = {course: [] for course in courses}\n    for course, prereq in prerequisites:\n        graph[course].append(prereq)\n    # DFS to detect cycles\n    def has_cycle(course, path, visited):\n        if course in path:\n            return True\n        if course in visited:\n            return False\n        path.add(course)\n        visited.add(course)\n        for prereq in graph[course]:\n            if has_cycle(prereq, path, visited):\n                return True\n        path.remove(course)\n        return False\n    visited = set()\n    for course in courses:\n        if course not in visited:\n            if has_cycle(course, set(), visited):\n                return False  # Schedule not possible\n    return True  # Schedule possible",
    "complexity": "O(n^2)"
}