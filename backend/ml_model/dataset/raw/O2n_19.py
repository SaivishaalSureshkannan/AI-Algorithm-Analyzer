{
    "code": "def exponential_time_19(vertices, edges):\n    # Create adjacency list\n    graph = {i: [] for i in range(vertices)}\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    def is_independent_set(subset):\n        # Check if no two vertices in the subset are adjacent\n        for i in subset:\n            for j in subset:\n                if i != j and j in graph[i]:\n                    return False\n        return True\n    \n    def find_max_independent_set(current_vertex, current_set):\n        if current_vertex == vertices:\n            if is_independent_set(current_set):\n                return len(current_set)\n            return 0\n        \n        # Include current vertex\n        include = find_max_independent_set(current_vertex + 1, current_set + [current_vertex])\n        \n        # Exclude current vertex\n        exclude = find_max_independent_set(current_vertex + 1, current_set)\n        \n        return max(include, exclude)\n    \n    return find_max_independent_set(0, [])",
    "complexity": "O(2^n)"
}